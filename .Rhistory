################################################################################
# name: simple_eventstudy.R
# author: scott cunningham and chatgpt4 code generator
# description: estimate an event study with a simple 2x2
################################################################################
# install.packages("stargazer", dependencies=TRUE)
# Load necessary libraries
# install.packages(c("tidyverse", "fixest", "haven"))
library(tidyverse)
library(fixest)
library(haven)
# Load the data
data <- haven::read_dta("https://github.com/scunning1975/mixtape/raw/master/castle.dta")
# Filter the data
data <- data %>%
filter(!(effyear %in% c(2005, 2007, 2008, 2009)))
# Generate post and treat variables
data <- data %>%
mutate(
year = as.numeric(year),
post = ifelse(year >= 2006, 1, 0),
treat = ifelse(!is.na(effyear), 1, 0)
)
# Event study
data <- data %>%
mutate(treated = ifelse(effyear == 2006 & year >= 2006, 1, 0))
# Run the regression
model <- feols(
l_homicide ~ i(treat, i.year, ref = 0, ref2 = 2005) + i(year) + i(treat),
data = data, cluster = ~state
)
summary(model)
# Extract event-study coefficients
coefs_event <- broom::tidy(model) %>%
# Select only event-study terms
filter(str_detect(term, "treat::1:year")) %>%
# Create year column
mutate(
year = as.numeric(str_extract(term, "treat::1:year::(.*)", group = 1))
) %>%
mutate(
conf.low = estimate - 1.96 * std.error,
conf.high = estimate + 1.96 * std.error
)
# Add 0 for omitted year 2005
coefs_event <- coefs_event %>%
add_row(
term = "treat::1:year::2005",
estimate = 0,
std.error = 0,
year = 2005,
conf.low = NA,
conf.high = NA
)
ggplot(coefs_event, aes(x = year, y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
geom_vline(xintercept = 2005.5, linetype = "dashed", color = "blue") +
geom_hline(yintercept = 0, color = "blue") +
labs(x = "Years Since Policy Change", y = "Ln(Homicides)", title = "Event Study") +
theme_minimal()
# ------------------------------------------------------------------------------
# name: baker_cs.R
# author: scott cunningham (baylor), pedro sant'anna (microsoft, vandy)
# description: implement cs on the baker simulated dataset
# last updated: february 19, 2022
# ------------------------------------------------------------------------------
# load packages
# install.packages("haven", dependencies = TRUE)
library(haven)
# install.packages("devtools"); devtools::install_github("bcallaway11/did")
library(ggplot2)
library(did) # Callaway & Sant'Anna
baker <- read_dta("https://github.com/scunning1975/mixtape/raw/master/baker.dta")
View(baker)
# untreated units have effective year of 0
baker$treat_date[is.na(baker$treat_date)] <- 0
# Estimating the effect on y2 (constant) and y (dynamic treatment)
atts <- att_gt(
yname = "y", # LHS variable
tname = "year", # panel time variable
idname = "id", # firms' panel id variable
gname = "treat_date", # first treatment period variable
data = baker, # data
xformla = NULL, # no covariates
#xformla = ~ l_police, # with covariates
est_method = "ipw", # "dr" is doubly robust. "ipw" is inverse probability weighting. "reg" is regression
control_group = "notyettreated", # set the comparison group which is either "nevertreated" or "notyettreated"
bstrap = TRUE, # if TRUE compute bootstrapped SE
biters = 1000, # number of bootstrap iterations
print_details = FALSE, # if TRUE, print detailed results
clustervars = "state", # cluster level
panel = TRUE # whether the data is panel or repeated cross-sectional
)
# Calculate group-time ("group") ATTs and overall ("simple") ATT
agg_effects <- aggte(atts, type = "group", balance_e=TRUE)
summary(agg_effects)
# Group-time ATTs
summary(atts)
# Plot group-time ATTs
ggdid(atts)
# Plot event-study coefficients
ggdid(agg_effects_es)
# ------------------------------------------------------------------------------
# Calculate group-time ATTs in relative event time
agg_effects_es <- aggte(atts, type = "dynamic")
summary(agg_effects_es)
# Plot event-study coefficients
ggdid(agg_effects_es)
# ------------------------------------------------------------------------------
# name: baker_sa.R
# author: scott cunningham (with massive help from grant mcdermott who basically
#         fixed all of it, so I think he's the author tbh)
# description: implement SA on the baker dataset
# last updated: february 20, 2022
# ------------------------------------------------------------------------------
# load libraries
#install.packages("haven")
library(haven)  # Read Stata .dta files
library(fixest) # Sun & Abraham (and regular TWFE and high-dimensional FEs, etc., etc.)
# load data
baker = read_dta('https://github.com/scunning1975/mixtape/raw/master/baker.dta')
# change to 0 anyone never treated, but
# because all units in this dataset are treated it is kind of pointless. But I
# include it so you remember to do it, but you don't need to in baker.dta.
baker$treated = baker$treat_date != 0
# Naive TWFE (bc it assumes homogeneous treatment profiles) Event Study (SEs clustered by state)
res_naive = feols(
y ~ i(time_til, treated, ref = -1) | id + year,
data = baker, vcov = ~state
)
summary(res_naive)
iplot(res_naive, main = "Naive TWFE")
# Again, because all units are treated you could just as well have run the
# following:
feols(
y ~ i(time_til, ref = -1) | id + year,
data = baker, vcov = ~state
) |>
iplot()
# Sun and Abraham (SA20)
unique(baker$treat_date)
res_cohort = feols(
y ~ sunab(treat_date, year) | id + year,
baker, subset = ~ year < 2004, ## NB: subset!
vcov = ~state
)
summary(res_cohort)
iplot(res_cohort, ref.line = -1, main = "Sun & Abraham")
# Can also use iplot to plot them together
iplot(
list(res_naive, res_cohort), ref.line = -1,
main = "Treatment's effect on y"
)
legend(
"topright", col = c(1, 2), pch = c(20, 17),
legend = c("TWFE", "Sun & Abraham")
)
# The full ATT
summary(res_cohort, agg = "att")
# Full disaggregation
summary(res_cohort)
# Aside: If you'd prefer ggplot2 versions of these plots then you can try...
library(ggiplot) # devtools::install_github("grant_mcdermott/ggiplot")
# Aside: If you'd prefer ggplot2 versions of these plots then you can try...
library(ggplot) # devtools::install_github("grant_mcdermott/ggiplot")
devtools::install_github("grant_mcdermott/ggiplot")
